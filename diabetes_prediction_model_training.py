# -*- coding: utf-8 -*-
"""diabetes prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TFIulSIDPNhI1I_TymnXvR03JeMyo0Py
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabates_data = pd.read_csv('/content/diabetes.csv')

# diabates_data.head()

# diabates_data.shape

# diabates_data.describe()

# diabates_data['Outcome'].value_counts()

# diabates_data.groupby('Outcome').mean()

"""Seperating the data and labels

"""

X = diabates_data.drop(columns='Outcome',axis=1)
Y = diabates_data['Outcome']

# print(X)

# print(Y)

"""Data Standardization"""

scalar = StandardScaler()
scalar.fit(X)
standardize_data = scalar.transform(X)





print(standardize_data)

X = standardize_data
Y = diabates_data['Outcome']

# print(X)

# print(Y)

"""Train Test Split"""

X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train,Y_train)



"""Model Evaluation

Accuracy Score
"""

# Accuracy score of training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of training data: ',training_data_accuracy)

# Accuracy score of test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of test data: ',test_data_accuracy)

"""Predictive system

"""

input_data = (13,145,82,19,110,22.2,0.245,57)

#changing the input data to numpy array
input_data_np_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_np_array.reshape(1,-1)

#standardize the input data
std_data = scalar.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

"""Save the model"""

import joblib

# Save the trained SVM model
joblib.dump(classifier, "svm_diabetes_model.pkl")

# Save the StandardScaler too (important for preprocessing)
joblib.dump(scalar, "scaler.pkl")

"""Load the model"""

# Load the model and scaler
loaded_model = joblib.load("svm_diabetes_model.pkl")
loaded_scaler = joblib.load("scaler.pkl")

# Test with the same input
input_data = (13,145,82,19,110,22.2,0.245,57)
input_data_np_array = np.asarray(input_data).reshape(1, -1)

std_data = loaded_scaler.transform(input_data_np_array)
prediction = loaded_model.predict(std_data)

print("Prediction:", prediction)

"""Download the Model

"""

from google.colab import files

files.download("svm_diabetes_model.pkl")
files.download("scaler.pkl")